```python
# The task involves picking up a red bottle and pouring water into a black cup.
# There are 4 stages involved in this task:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the bottle with the cup opening
# 4. Pour water into the cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontally aligned for grasping the bottle."""
    # Use keypoints 8 and 10 to form a vector and ensure it's horizontal
    vector = keypoints[10] - keypoints[8]
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 1 path constraints
# No path constraints for stage 1

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle for grasping."""
    # Align with keypoint 8 (top of the red bottle)
    cost = np.linalg.norm(end_effector - keypoints[8])
    return cost

### stage 2 path constraints
# No path constraints for stage 2

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle above the cup opening."""
    # Ensure the bottle (keypoint 8) is 10cm above the cup opening (keypoint 9)
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])
    cost = np.linalg.norm(keypoints[8] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(8)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Tilt the bottle to pour water into the cup."""
    # Ensure the bottle (keypoint 8) is tilted towards the cup (keypoint 9)
    vector = keypoints[8] - keypoints[9]
    cost = abs(vector[2] + 0.05)  # Ensure a slight tilt
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(8)

def stage4_path_constraint2(end_effector, keypoints):
    """Ensure the bottle spout is directly above the cup opening."""
    # Align keypoint 8 (bottle) directly above keypoint 9 (cup)
    cost = np.linalg.norm(keypoints[8][:2] - keypoints[9][:2])
    return cost

grasp_keypoints = [-1, 8, -1, -1]
release_keypoints = [-1, -1, -1, 8]
```