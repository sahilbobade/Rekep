```python
# The task involves picking up the red bottle and pouring water into the black cup.
# This can be broken down into three stages:
# 1. Grasp the red bottle.
# 2. Align the red bottle with the black cup.
# 3. Pour water from the red bottle into the black cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 3)."""
    return np.linalg.norm(end_effector - keypoints[3])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The red bottle (keypoint 3) needs to be 10cm above the black cup opening (keypoint 6)."""
    offsetted_point = keypoints[6] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[3] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 3)."""
    return get_grasping_cost_by_keypoint_idx(3)

def stage2_path_constraint2(end_effector, keypoints):
    """The red bottle must stay upright to avoid spilling."""
    bottle_vector = keypoints[4] - keypoints[3]
    z_axis = np.array([0, 0, 1])
    angle = np.arccos(np.dot(bottle_vector, z_axis) / (np.linalg.norm(bottle_vector) * np.linalg.norm(z_axis)))
    return angle - np.pi / 18  # Allow a small tilt

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red bottle (keypoint 3) needs to be 5cm above the black cup opening (keypoint 6)."""
    offsetted_point = keypoints[6] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[3] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The red bottle spout (keypoint 4) must be tilted to pour water."""
    bottle_vector = keypoints[4] - keypoints[3]
    z_axis = np.array([0, 0, 1])
    angle = np.arccos(np.dot(bottle_vector, z_axis) / (np.linalg.norm(bottle_vector) * np.linalg.norm(z_axis)))
    return np.pi / 4 - angle  # Tilt to 45 degrees

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 3)."""
    return get_grasping_cost_by_keypoint_idx(3)

def stage3_path_constraint2(end_effector, keypoints):
    """The red bottle spout (keypoint 4) is directly above the black cup opening (keypoint 6)."""
    return np.linalg.norm(keypoints[4][:2] - keypoints[6][:2])

grasp_keypoints = [3, -1, -1]
release_keypoints = [-1, -1, 3]
```