```python
# The task involves picking up a red bottle and pouring water into a black cup.
# There are 4 stages involved in this task:
# 1. Align the end-effector to be horizontal for grasping the bottle.
# 2. Grasp the red bottle.
# 3. Align the bottle with the cup opening.
# 4. Pour water into the cup.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal."""
    # Use keypoints 0 and 2 to form a vector and ensure it is horizontal.
    vector = keypoints[2] - keypoints[0]
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment.
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle."""
    # Align with keypoint 7 (red bottle).
    cost = np.linalg.norm(end_effector - keypoints[7])
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Align the bottle with the cup opening."""
    # Ensure the bottle (keypoint 7) is 10cm above the cup opening (keypoint 6).
    offsetted_point = keypoints[6] + np.array([0, 0, 0.1])
    cost = np.linalg.norm(keypoints[7] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(7)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle spout needs to be tilted to pour water."""
    # Assume keypoint 7 is the spout, ensure it is tilted.
    vector = keypoints[7] - keypoints[0]
    cost = abs(vector[2] - 0.1)  # Ensure some tilt in the z-component.
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(7)

def stage4_path_constraint2(end_effector, keypoints):
    """The bottle spout is directly above the cup opening."""
    # Ensure keypoint 7 is directly above keypoint 6.
    cost = np.linalg.norm(keypoints[7][:2] - keypoints[6][:2])
    return cost

grasp_keypoints = [-1, 7, -1, -1]
release_keypoints = [-1, -1, -1, 7]
```