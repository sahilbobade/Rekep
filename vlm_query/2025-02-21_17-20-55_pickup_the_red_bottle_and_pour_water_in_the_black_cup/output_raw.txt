```python
# The task involves picking up a red bottle and pouring water into a black cup.
# There are 4 stages involved in this task:
# 1. Align the end-effector to decide its orientation.
# 2. Grasp the red bottle.
# 3. Align the bottle with the cup opening.
# 4. Pour water into the cup.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal for grasping the bottle."""
    vector = keypoints[2] - keypoints[1]  # Example vector on the end-effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle cap."""
    offsetted_point = keypoints[5]  # Keypoint on the red bottle cap
    cost = np.linalg.norm(end_effector - offsetted_point)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Align the bottle with the cup opening."""
    offsetted_point = keypoints[11] + np.array([0, 0, 0.1])  # 10cm above the cup opening
    cost = np.linalg.norm(keypoints[5] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(5)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle cap needs to be 5cm above the cup opening."""
    offsetted_point = keypoints[11] + np.array([0, 0, 0.05])  # 5cm above the cup opening
    cost = np.linalg.norm(keypoints[5] - offsetted_point)
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """The bottle must be tilted to pour water."""
    vector = keypoints[8] - keypoints[5]  # Vector along the bottle
    cost = abs(vector[2] + 0.1)  # Ensure some tilt by checking z-component
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(5)

def stage4_path_constraint2(end_effector, keypoints):
    """The bottle cap is directly above the cup opening."""
    offsetted_point = keypoints[11]
    cost = np.linalg.norm(keypoints[5][:2] - offsetted_point[:2])
    return cost

grasp_keypoints = [-1, 5, -1, -1]
release_keypoints = [-1, -1, -1, 5]
```