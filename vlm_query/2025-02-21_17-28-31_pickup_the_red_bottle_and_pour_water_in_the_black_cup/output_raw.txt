```python
# The task involves picking up a red bottle and pouring water into a black cup.
# There are 4 stages involved in this task:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the bottle with the cup opening
# 4. Pour water into the cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle effectively."""
    vector = keypoints[0] - keypoints[1]
    cost = abs(vector[2])  # Ensure the z-component is zero for horizontal alignment
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle cap."""
    offsetted_point = keypoints[6]  # Assuming keypoint 6 is the bottle cap
    cost = np.linalg.norm(end_effector - offsetted_point)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle cap 10cm above the cup opening."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])  # Assuming keypoint 9 is the cup opening
    cost = np.linalg.norm(keypoints[6] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(6)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle must stay upright to avoid spilling."""
    vector = keypoints[6] - keypoints[7]  # Assuming keypoint 7 is the bottom of the bottle
    cost = abs(vector[2] - np.linalg.norm(vector))  # Ensure the bottle is upright
    return cost

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle cap needs to be 5cm above the cup opening."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.05])
    cost = np.linalg.norm(keypoints[6] - offsetted_point)
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """The bottle must be tilted to pour water."""
    vector = keypoints[6] - keypoints[7]
    cost = abs(vector[2] + 0.1)  # Ensure a tilt for pouring
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(6)

def stage4_path_constraint2(end_effector, keypoints):
    """The bottle cap is directly above the cup opening."""
    cost = np.linalg.norm(keypoints[6][:2] - keypoints[9][:2])
    return cost

grasp_keypoints = [-1, 6, -1, -1]
release_keypoints = [-1, -1, -1, 6]
```