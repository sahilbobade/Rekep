```python
# The task "pickup the red bottle and pour water in the black cup" involves the following stages:
# 1. Align end-effector: Decide the orientation of the end-effector for grasping the bottle.
# 2. Grasp red bottle: Align the end-effector with the red bottle.
# 3. Align bottle with cup: Position the bottle above the cup.
# 4. Pour water: Tilt the bottle to pour water into the cup.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal for grasping the bottle."""
    vector = keypoints[0] - keypoints[1]  # Example vector on the end-effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle."""
    cost = np.linalg.norm(end_effector - keypoints[4])  # Align with keypoint 4 (red bottle)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle above the cup."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])  # 10cm above the cup opening
    cost = np.linalg.norm(keypoints[4] - offsetted_point)  # Bottle keypoint 4
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(4)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Tilt the bottle to pour water into the cup."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.05])  # 5cm above the cup opening
    cost = np.linalg.norm(keypoints[4] - offsetted_point)  # Bottle keypoint 4
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(4)

def stage4_path_constraint2(end_effector, keypoints):
    """The bottle spout is directly above the cup opening."""
    cost = np.linalg.norm(keypoints[5] - keypoints[9])  # Align spout keypoint 5 with cup keypoint 9
    return cost

grasp_keypoints = [-1, 4, -1, -1]
release_keypoints = [-1, -1, -1, 4]
```