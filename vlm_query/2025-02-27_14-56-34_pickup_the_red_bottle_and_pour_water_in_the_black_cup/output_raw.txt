```python
# The task involves picking up the red bottle and pouring water into the black cup.
# This can be broken down into the following stages:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the bottle with the cup
# 4. Pour water into the cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle."""
    vector = keypoints[0] - end_effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle."""
    cost = np.linalg.norm(end_effector - keypoints[2])  # Align with keypoint 2
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Align the bottle with the cup opening."""
    offsetted_point = keypoints[8] + np.array([0, 0, 0.1])  # 10cm above the cup
    cost = np.linalg.norm(keypoints[2] - offsetted_point)  # Bottle aligned with cup
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(2)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle spout needs to be 5cm above the cup opening."""
    offsetted_point = keypoints[8] + np.array([0, 0, 0.05])  # 5cm above the cup
    cost = np.linalg.norm(keypoints[2] - offsetted_point)  # Bottle spout aligned
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """The bottle must be tilted to pour water."""
    vector = keypoints[2] - keypoints[1]  # Vector along the bottle
    cost = abs(vector[2]) - 0.1  # Ensure some tilt
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(2)

def stage4_path_constraint2(end_effector, keypoints):
    """The bottle spout is directly above the cup opening."""
    cost = np.linalg.norm(keypoints[2][:2] - keypoints[8][:2])  # Align x, y
    return cost

grasp_keypoints = [-1, 2, -1, -1]
release_keypoints = [-1, -1, -1, 2]
```