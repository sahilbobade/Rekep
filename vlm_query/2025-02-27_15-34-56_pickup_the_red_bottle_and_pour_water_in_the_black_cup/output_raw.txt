```python
# The task involves picking up the red bottle and pouring water into the black cup.
# There are 4 stages involved in this task:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the red bottle with the black cup
# 4. Pour water into the black cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle effectively."""
    vector = keypoints[1] - keypoints[3]  # Example vector on the end-effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle cap."""
    offsetted_point = keypoints[4]  # Red bottle cap
    cost = np.linalg.norm(end_effector - offsetted_point)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the red bottle spout above the black cup opening."""
    offsetted_point = keypoints[8] + np.array([0, 0, 0.1])  # 10cm above the cup opening
    cost = np.linalg.norm(keypoints[6] - offsetted_point)  # Red bottle spout
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(4)

def stage3_path_constraint2(end_effector, keypoints):
    """The red bottle must stay upright to avoid spilling."""
    vector = keypoints[6] - keypoints[4]  # Vector along the bottle
    cost = abs(vector[2] - np.linalg.norm(vector))  # Ensure it's upright
    return cost

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The red bottle spout needs to be 5cm above the cup opening."""
    offsetted_point = keypoints[8] + np.array([0, 0, 0.05])  # 5cm above the cup opening
    cost = np.linalg.norm(keypoints[6] - offsetted_point)  # Red bottle spout
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """The red bottle spout must be tilted to pour water."""
    vector = keypoints[6] - keypoints[4]  # Vector along the bottle
    cost = abs(vector[2])  # Ensure it's tilted
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(4)

def stage4_path_constraint2(end_effector, keypoints):
    """The red bottle spout is directly above the cup opening."""
    cost = np.linalg.norm(keypoints[6][:2] - keypoints[8][:2])  # Match x, y positions
    return cost

grasp_keypoints = [-1, 4, -1, -1]
release_keypoints = [-1, -1, -1, 4]
```