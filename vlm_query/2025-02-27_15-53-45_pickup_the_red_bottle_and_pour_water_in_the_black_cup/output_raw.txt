```python
# The task involves picking up the red bottle and pouring water into the black cup.
# This can be broken down into the following stages:
# 1. Align end-effector for grasping the red bottle.
# 2. Grasp the red bottle.
# 3. Align the red bottle with the black cup.
# 4. Pour water from the red bottle into the black cup.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontally aligned for grasping the red bottle."""
    # Use keypoint 7 (red bottle) and end-effector to form a horizontal vector.
    vector = keypoints[7] - end_effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment.
    return cost

### stage 1 path constraints
# No path constraints needed for this stage.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle for grasping."""
    # Align with keypoint 7 (red bottle).
    cost = np.linalg.norm(end_effector - keypoints[7])
    return cost

### stage 2 path constraints
# No path constraints needed for this stage.

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the red bottle above the black cup."""
    # Ensure the bottle (keypoint 7) is above the cup (keypoint 9).
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])  # 10cm above the cup.
    cost = np.linalg.norm(keypoints[7] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(7)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Tilt the red bottle to pour water into the black cup."""
    # Ensure the bottle (keypoint 7) is tilted towards the cup (keypoint 9).
    vector = keypoints[7] - keypoints[9]
    cost = abs(vector[2] + 0.05)  # Tilted downwards slightly.
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(7)

def stage4_path_constraint2(end_effector, keypoints):
    """Ensure the bottle spout is directly above the cup opening."""
    # Align keypoint 7 (bottle) with keypoint 9 (cup).
    cost = np.linalg.norm(keypoints[7][:2] - keypoints[9][:2])
    return cost

grasp_keypoints = [-1, 7, -1, -1]

release_keypoints = [-1, -1, -1, 7]
```