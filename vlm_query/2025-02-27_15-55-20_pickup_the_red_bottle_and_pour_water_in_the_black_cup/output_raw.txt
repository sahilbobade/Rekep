```python
# The task involves picking up the red bottle and pouring water into the black cup.
# There are 4 stages involved in this task:
# 1. Align the end-effector.
# 2. Grasp the red bottle.
# 3. Align the bottle with the cup opening.
# 4. Pour water into the cup.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle effectively."""
    vector = keypoints[0] - end_effector
    cost = abs(vector[2])  # Ensure the z-component is zero for horizontal alignment
    return cost

### stage 1 path constraints
# No path constraints for stage 1

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle cap (keypoint 7)."""
    cost = np.linalg.norm(end_effector - keypoints[7])
    return cost

### stage 2 path constraints
# No path constraints for stage 2

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle cap (keypoint 7) 10cm above the cup opening (keypoint 9)."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])  # 10cm above
    cost = np.linalg.norm(keypoints[7] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle cap (keypoint 7)."""
    return get_grasping_cost_by_keypoint_idx(7)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Ensure the bottle cap (keypoint 7) is 5cm above the cup opening (keypoint 9)."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.05])  # 5cm above
    cost = np.linalg.norm(keypoints[7] - offsetted_point)
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """Tilt the bottle to pour water."""
    vector = keypoints[5] - keypoints[7]  # Vector from bottle base to cap
    cost = abs(vector[2]) - 0.1  # Ensure some tilt by checking z-component
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle cap (keypoint 7)."""
    return get_grasping_cost_by_keypoint_idx(7)

def stage4_path_constraint2(end_effector, keypoints):
    """Ensure the bottle cap (keypoint 7) is directly above the cup opening (keypoint 9)."""
    cost = np.linalg.norm(keypoints[7][:2] - keypoints[9][:2])  # Check x, y alignment
    return cost

grasp_keypoints = [-1, 7, -1, -1]
release_keypoints = [-1, -1, -1, 7]
```