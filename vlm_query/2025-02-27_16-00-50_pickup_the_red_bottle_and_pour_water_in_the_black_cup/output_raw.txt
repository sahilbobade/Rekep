```python
# The task involves picking up the red bottle and pouring water into the black cup.
# There are 4 stages involved in this task:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the bottle with the cup opening
# 4. Pour water into the cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle effectively."""
    vector = keypoints[0] - end_effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 1 path constraints
# No path constraints for stage 1

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 3)."""
    cost = np.linalg.norm(end_effector - keypoints[3])
    return cost

### stage 2 path constraints
# No path constraints for stage 2

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle spout (keypoint 4) 10cm above the cup opening (keypoint 6)."""
    offsetted_point = keypoints[6] + np.array([0, 0, 0.1])
    cost = np.linalg.norm(keypoints[4] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle (keypoint 3)."""
    return get_grasping_cost_by_keypoint_idx(3)

def stage3_path_constraint2(end_effector, keypoints):
    """Keep the bottle upright to avoid spilling."""
    vector = keypoints[4] - keypoints[3]
    cost = abs(vector[2] - 0.1)  # Ensure the bottle is upright
    return cost

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle spout (keypoint 4) 5cm above the cup opening (keypoint 6)."""
    offsetted_point = keypoints[6] + np.array([0, 0, 0.05])
    cost = np.linalg.norm(keypoints[4] - offsetted_point)
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """Tilt the bottle spout to pour water."""
    vector = keypoints[4] - keypoints[3]
    cost = abs(vector[2] - 0.05)  # Ensure the bottle is tilted
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle (keypoint 3)."""
    return get_grasping_cost_by_keypoint_idx(3)

def stage4_path_constraint2(end_effector, keypoints):
    """Ensure the bottle spout is directly above the cup opening."""
    cost = np.linalg.norm(keypoints[4][:2] - keypoints[6][:2])
    return cost

grasp_keypoints = [-1, 3, -1, -1]
release_keypoints = [-1, -1, -1, 3]
```