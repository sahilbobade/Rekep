```python
# The task involves picking up the red bottle and pouring water into the black cup.
# There are 4 stages involved in this task:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the red bottle with the black cup
# 4. Pour water into the black cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle."""
    # Use keypoints 0 and 1 to form a vector and ensure it is horizontal.
    vector = keypoints[1] - keypoints[0]
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment.
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle cap."""
    # Align with keypoint 7 (red bottle cap).
    offsetted_point = keypoints[7]
    cost = np.linalg.norm(end_effector - offsetted_point)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the red bottle above the black cup."""
    # Ensure the bottle (keypoint 7) is above the cup (keypoint 11).
    offsetted_point = keypoints[11] + np.array([0, 0, 0.1])  # 10cm above the cup
    cost = np.linalg.norm(keypoints[7] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(7)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Tilt the red bottle to pour water into the black cup."""
    # Ensure the bottle (keypoint 7) is tilted towards the cup (keypoint 11).
    vector = keypoints[7] - keypoints[4]  # Vector from bottle base to cap
    cost = abs(vector[2] + 0.1)  # Ensure a tilt by checking z-component
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(7)

def stage4_path_constraint2(end_effector, keypoints):
    """Ensure the bottle spout is directly above the cup opening."""
    # Align keypoint 7 (bottle cap) with keypoint 11 (cup center).
    cost = np.linalg.norm(keypoints[7][:2] - keypoints[11][:2])
    return cost

grasp_keypoints = [-1, 7, -1, -1]

end_effector_keypoints = [0, 1]

release_keypoints = [-1, -1, -1, 7]
```