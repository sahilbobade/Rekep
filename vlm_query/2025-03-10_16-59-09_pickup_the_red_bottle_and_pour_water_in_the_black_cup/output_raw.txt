```python
# The task involves picking up the red bottle and pouring water into the black cup.
# There are 4 stages involved in this task:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the red bottle with the black cup
# 4. Pour water into the black cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle."""
    # Use keypoints 0 and 3 to form a vector and ensure it is horizontal.
    vector = keypoints[3] - keypoints[0]
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment.
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle."""
    # Align with keypoint 5 (top of the red bottle).
    offsetted_point = keypoints[5]
    cost = np.linalg.norm(end_effector - offsetted_point)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Align the red bottle with the black cup opening."""
    # Ensure the bottle (keypoint 5) is above the cup opening (keypoint 9).
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])  # 10cm above the cup opening
    cost = np.linalg.norm(keypoints[5] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(5)

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The red bottle spout needs to be above the cup opening."""
    # Ensure the spout (keypoint 6) is 5cm above the cup opening (keypoint 9).
    offsetted_point = keypoints[9] + np.array([0, 0, 0.05])
    cost = np.linalg.norm(keypoints[6] - offsetted_point)
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """The red bottle spout must be tilted to pour water."""
    # Ensure the spout (keypoint 6) is tilted towards the cup.
    vector = keypoints[6] - keypoints[5]
    cost = abs(vector[2]) - 0.1  # Ensure some tilt in the z-direction.
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(5)

def stage4_path_constraint2(end_effector, keypoints):
    """The red bottle spout is directly above the cup opening."""
    # Ensure the spout (keypoint 6) is directly above the cup opening (keypoint 9).
    cost = np.linalg.norm(keypoints[6][:2] - keypoints[9][:2])
    return cost

grasp_keypoints = [-1, 5, -1, -1]

end_effector_keypoints = [0, 3]

release_keypoints = [-1, -1, -1, 5]
```