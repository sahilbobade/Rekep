```python
# The task involves picking up a red bottle and pouring water into a black cup.
# This task can be broken down into the following stages:
# 1. Align end-effector
# 2. Grasp the red bottle
# 3. Align the bottle with the cup
# 4. Pour water into the cup

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is horizontal to grasp the bottle better."""
    vector = keypoints[0] - end_effector
    cost = abs(vector[2])  # Ensure the z-component is 0 for horizontal alignment
    return cost

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle's keypoint."""
    offsetted_point = keypoints[8]  # Keypoint on the red bottle
    cost = np.linalg.norm(end_effector - offsetted_point)
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Position the bottle's spout above the cup opening."""
    offsetted_point = keypoints[10] + np.array([0, 0, 0.1])  # 10cm above the cup opening
    cost = np.linalg.norm(keypoints[8] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(8)

def stage3_path_constraint2(end_effector, keypoints):
    """Keep the bottle upright to avoid spilling."""
    vector = keypoints[8] - keypoints[9]  # Vector along the bottle
    cost = abs(vector[2] - np.linalg.norm(vector))  # Ensure the bottle is upright
    return cost

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """Lower the bottle's spout to pour water into the cup."""
    offsetted_point = keypoints[10] + np.array([0, 0, 0.05])  # 5cm above the cup opening
    cost = np.linalg.norm(keypoints[8] - offsetted_point)
    return cost

def stage4_subgoal_constraint2(end_effector, keypoints):
    """Tilt the bottle to pour water."""
    vector = keypoints[8] - keypoints[9]  # Vector along the bottle
    cost = abs(vector[2])  # Ensure the bottle is tilted
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(8)

def stage4_path_constraint2(end_effector, keypoints):
    """Ensure the bottle's spout is directly above the cup opening."""
    cost = np.linalg.norm(keypoints[8][:2] - keypoints[10][:2])  # Check x, y alignment
    return cost

grasp_keypoints = [-1, 8, -1, -1]
end_effector_keypoints = [0, 2, 3, 4]
release_keypoints = [-1, -1, -1, 8]
```