```python
# The task "pickup the red bottle and pour water in the black cup" involves 3 stages:
# 1. Grasp the red bottle.
# 2. Align the red bottle with the black cup opening.
# 3. Pour water from the red bottle into the black cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle's handle (keypoint 7)."""
    return np.linalg.norm(end_effector - keypoints[7])

### stage 1 path constraints
# No path constraints needed for grasping stage.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The red bottle's spout (keypoint 10) needs to be 10cm above the black cup opening (keypoint 9)."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[10] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle's handle (keypoint 7)."""
    return get_grasping_cost_by_keypoint_idx(7)

def stage2_path_constraint2(end_effector, keypoints):
    """The red bottle must stay upright to avoid spilling."""
    bottle_vector = keypoints[10] - keypoints[7]
    z_axis = np.array([0, 0, 1])
    angle = np.arccos(np.dot(bottle_vector, z_axis) / (np.linalg.norm(bottle_vector) * np.linalg.norm(z_axis)))
    return angle - np.pi / 18  # Allow a small tilt

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red bottle's spout (keypoint 10) needs to be 5cm above the black cup opening (keypoint 9)."""
    offsetted_point = keypoints[9] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[10] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The red bottle's spout (keypoint 10) must be tilted to pour water."""
    bottle_vector = keypoints[10] - keypoints[7]
    z_axis = np.array([0, 0, 1])
    angle = np.arccos(np.dot(bottle_vector, z_axis) / (np.linalg.norm(bottle_vector) * np.linalg.norm(z_axis)))
    return np.pi / 4 - angle  # Tilt to 45 degrees

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle's handle (keypoint 7)."""
    return get_grasping_cost_by_keypoint_idx(7)

def stage3_path_constraint2(end_effector, keypoints):
    """The red bottle's spout (keypoint 10) is directly above the black cup opening (keypoint 9)."""
    return np.linalg.norm(keypoints[10][:2] - keypoints[9][:2])

grasp_keypoints = [7, -1, -1]

release_keypoints = [-1, -1, 7]

desired_direction = np.array([0, 1, 0])  # Forward direction for pouring
```