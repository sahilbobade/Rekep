```python
# The task "pickup the red bottle and pour water in the black cup" involves 3 stages:
# 1. Grasp the red bottle.
# 2. Align the red bottle with the black cup.
# 3. Pour water into the black cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 0)."""
    return np.linalg.norm(end_effector - keypoints[0])

### stage 1 path constraints
# No path constraints for grasping stage

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The red bottle (keypoint 0) needs to be 10cm above the black cup (keypoint 3)."""
    offsetted_point = keypoints[3] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[0] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 0)."""
    return get_grasping_cost_by_keypoint_idx(0)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red bottle (keypoint 0) needs to be 5cm above the black cup (keypoint 3)."""
    offsetted_point = keypoints[3] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[0] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The red bottle (keypoint 0) must be tilted to pour water."""
    bottle_vector = keypoints[1] - keypoints[0]
    vertical_vector = np.array([0, 0, 1])
    angle = np.arccos(np.dot(bottle_vector, vertical_vector) / (np.linalg.norm(bottle_vector) * np.linalg.norm(vertical_vector)))
    return angle - np.pi / 4  # Tilt by 45 degrees

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 0)."""
    return get_grasping_cost_by_keypoint_idx(0)

def stage3_path_constraint2(end_effector, keypoints):
    """The red bottle spout (keypoint 1) is directly above the black cup (keypoint 3)."""
    return np.linalg.norm(keypoints[1][:2] - keypoints[3][:2])

grasp_keypoints = [0, -1, -1]
release_keypoints = [-1, -1, 0]

desired_direction = np.array([0, 1, 0])  # Forward direction for pouring
```