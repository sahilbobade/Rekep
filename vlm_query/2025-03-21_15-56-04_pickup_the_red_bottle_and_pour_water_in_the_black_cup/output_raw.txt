```python
# The task involves picking up the red bottle and pouring water into the black cup.
# This can be broken down into three stages:
# 1. Grasp the red bottle.
# 2. Align the bottle with the cup opening.
# 3. Pour water into the cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 0)."""
    return np.linalg.norm(end_effector - keypoints[0])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 0) needs to be 10cm above the cup opening (keypoint 4)."""
    offsetted_point = keypoints[4] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[0] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the bottle (keypoint 0)."""
    return get_grasping_cost_by_keypoint_idx(0)

def stage2_path_constraint2(end_effector, keypoints):
    """The bottle must stay upright to avoid spilling."""
    bottle_direction = keypoints[0] - keypoints[1]
    upright_direction = np.array([0, 0, 1])
    angle = np.arccos(np.dot(bottle_direction, upright_direction) / 
                      (np.linalg.norm(bottle_direction) * np.linalg.norm(upright_direction)))
    return angle - np.pi/6  # Allow a small tilt

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 0) needs to be 5cm above the cup opening (keypoint 4)."""
    offsetted_point = keypoints[4] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[0] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The bottle (keypoint 0) must be tilted to pour water."""
    bottle_direction = keypoints[0] - keypoints[1]
    pour_direction = np.array([0, 1, 0])  # Tilt forward
    angle = np.arccos(np.dot(bottle_direction, pour_direction) / 
                      (np.linalg.norm(bottle_direction) * np.linalg.norm(pour_direction)))
    return angle - np.pi/4  # Tilt enough to pour

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the bottle (keypoint 0)."""
    return get_grasping_cost_by_keypoint_idx(0)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle spout (keypoint 1) is directly above the cup opening (keypoint 4)."""
    return np.linalg.norm(keypoints[1][:2] - keypoints[4][:2])

grasp_keypoints = [0, -1, -1]
release_keypoints = [-1, -1, -1]

desired_direction = np.array([0, 1, 0])  # Forward direction for pouring
```