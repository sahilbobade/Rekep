```python
# The task involves the following stages:
# 1. Grasp the red bottle.
# 2. Align the bottle with the black holder.
# 3. Pour the bottle into the black holder.
# 4. Put the bottle back on the table.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle."""
    return np.linalg.norm(end_effector - keypoints[9])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The bottle needs to be 10cm above the black holder."""
    offsetted_point = keypoints[11] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[9] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(9)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The bottle spout must be tilted to pour liquid."""
    bottle_vector = keypoints[9] - keypoints[11]
    return np.arccos(np.dot(bottle_vector, np.array([0, 0, -1])) / np.linalg.norm(bottle_vector))

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(9)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle must be above the black holder."""
    return np.linalg.norm(keypoints[9] - keypoints[11]) - 0.1

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle should be placed back on the table."""
    return np.linalg.norm(keypoints[9] - keypoints[4])

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle."""
    return get_grasping_cost_by_keypoint_idx(9)

grasp_keypoints = [9, -1, -1, -1]
release_keypoints = [-1, -1, -1, 9]

desired_direction = np.array([0, 1, 0])
```