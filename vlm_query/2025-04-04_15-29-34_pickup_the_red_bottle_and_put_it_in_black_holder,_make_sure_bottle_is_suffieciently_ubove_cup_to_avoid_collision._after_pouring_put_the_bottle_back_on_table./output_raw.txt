```python
# The task involves the following stages:
# 1. Grasp the red bottle.
# 2. Move the bottle above the black holder.
# 3. Pour the bottle into the black holder.
# 4. Put the bottle back on the table.

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 5)."""
    return np.linalg.norm(end_effector - keypoints[5])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 5) needs to be 10cm above the black holder (keypoint 11)."""
    offsetted_point = keypoints[11] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[5] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 5)."""
    return get_grasping_cost_by_keypoint_idx(5)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 5) must be tilted to pour liquid."""
    # Assuming tilting involves changing the z-axis orientation
    return np.abs(keypoints[5][2] - keypoints[11][2] - 0.05)

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 5)."""
    return get_grasping_cost_by_keypoint_idx(5)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle (keypoint 5) is directly above the black holder (keypoint 11)."""
    return np.linalg.norm(keypoints[5][:2] - keypoints[11][:2])

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 5) should be placed back on the table (keypoint 9)."""
    return np.linalg.norm(keypoints[5] - keypoints[9])

### stage 4 path constraints
# No path constraints needed for placing the bottle back.

grasp_keypoints = [5, -1, -1, -1]
release_keypoints = [-1, -1, -1, 5]

desired_direction = np.array([0, 1, 0])  # Forward/backward direction for pouring
```