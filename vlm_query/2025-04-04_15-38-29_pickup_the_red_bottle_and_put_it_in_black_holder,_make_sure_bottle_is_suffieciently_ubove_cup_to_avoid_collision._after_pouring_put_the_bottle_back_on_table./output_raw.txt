```python
# The task involves 5 stages:
# 1. Grasp the red bottle.
# 2. Move the bottle above the black holder.
# 3. Pour the bottle into the black holder.
# 4. Move the bottle back to the table.
# 5. Release the bottle on the table.

num_stages = 5

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 4)."""
    return np.linalg.norm(end_effector - keypoints[4])

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 4) needs to be 10cm above the black holder (keypoint 3)."""
    offsetted_point = keypoints[3] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[4] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 4)."""
    return get_grasping_cost_by_keypoint_idx(4)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 4) must be tilted to pour liquid."""
    # Assuming the bottle is tilted when the z-axis of the bottle is not parallel to the global z-axis
    bottle_vector = keypoints[4] - keypoints[8]
    return np.abs(np.dot(bottle_vector, np.array([0, 0, 1])))

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 4)."""
    return get_grasping_cost_by_keypoint_idx(4)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle (keypoint 4) is directly above the black holder (keypoint 3)."""
    return np.linalg.norm(keypoints[4][:2] - keypoints[3][:2])

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 4) should be safe distance above the table (keypoint 0)."""
    offsetted_point = keypoints[0] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[4] - offsetted_point)

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 4)."""
    return get_grasping_cost_by_keypoint_idx(4)

### stage 5 sub-goal constraints
def stage5_subgoal_constraint1(end_effector, keypoints):
    """Align the bottle (keypoint 4) with the table (keypoint 0) for release."""
    return np.linalg.norm(keypoints[4][:2] - keypoints[0][:2])

### stage 5 path constraints
def stage5_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 4)."""
    return get_grasping_cost_by_keypoint_idx(4)

grasp_keypoints = [4, -1, -1, -1, -1]
release_keypoints = [-1, -1, -1, -1, 4]

desired_direction = np.array([0, 1, 0])
```